{\rtf1\ansi\ansicpg1252\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 # Definition for singly-linked list.\
# class ListNode(object):\
#     def __init__(self, val=0, next=None):\
#         self.val = val\
#         self.next = next\
# Definition for a binary tree node.\
# class TreeNode(object):\
#     def __init__(self, val=0, left=None, right=None):\
#         self.val = val\
#         self.left = left\
#         self.right = right\
class Solution(object):\
    def sortedListToBST(self, head):\
        """\
        :type head: ListNode\
        :rtype: TreeNode\
        """\
        '''\
        [-10,-3,0,5,9]\
              p s   f\
              \
        head = [-10, 3]\
        right = [5,9]\
        slow = 0\
        \
            (0)\
            .left -> [-10, -3]\
                      p    s   f\
            head = [-10]\
            right= None\
            slow  = -3\
\
                    (-3)\
                    .left -> [-10]\
\
                    .right-> None\
\
            (0).right-> [5, 9]\
                         p  s   f\
                head-> [5]\
                right = None\
                slow = 9\
                \
                (9)\
                .left -> [5]\
                .right-> [None]\
                \
        '''\
        \
        if not head:\
            return None\
        if not head.next:\
            return TreeNode(head.val)\
        \
        \
        prev = head\
        slow = head\
        fast = head\
        \
        while fast and fast.next:\
            fast = fast.next.next\
            prev = slow\
            slow = slow.next\
            \
        prev.next = None\
        right = slow.next\
        slow.next = None\
        \
        root = TreeNode(slow.val)\
        \
        root.left = self.sortedListToBST(head)\
        root.right = self.sortedListToBST(right)\
        \
        return root\
        }