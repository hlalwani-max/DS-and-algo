{\rtf1\ansi\ansicpg1252\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 # Definition for a binary tree node.\
# class TreeNode(object):\
#     def __init__(self, x):\
#         self.val = x\
#         self.left = None\
#         self.right = None\
\
class Solution(object):\
    def addOneRow(self, root, v, d):\
        """\
        :type root: TreeNode\
        :type v: int\
        :type d: int\
        :rtype: TreeNode\
        """\
        if d == 1:\
            new_root = TreeNode(v)\
            new_root.left = root\
            return new_root\
        \
        self.helper(root, d, 1, v)\
        \
        return root\
        \
    def helper(self, node, d, h, v):\
        if d == h+1:\
            if node.left:\
                temp_left = node.left\
                node.left = TreeNode(v)\
                node.left.left = temp_left\
            else:\
                node.left = TreeNode(v)\
                \
            if node.right:\
                temp_right = node.right\
                node.right = TreeNode(v)\
                node.right.right = temp_right\
            else:\
                node.right = TreeNode(v)\
                \
        else:\
            if node.left:\
                self.helper(node.left, d, h+1, v)\
                \
            if node.right:\
                self.helper(node.right, d, h+1, v)\
            \
            \
            \
            \
            }