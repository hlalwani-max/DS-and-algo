#!/bin/python3

import os
import queue

#
# Complete the 'hospital' function below.
#
# The function is expected to return an INTEGER.
# The function accepts UNWEIGHTED_INTEGER_GRAPH city as parameter.
#

#
# For the unweighted graph, <name>:
#
# 1. The number of nodes is <name>_nodes.
# 2. The number of edges is <name>_edges.
# 3. An edge exists between <name>_from[i] and <name>_to[i].
#
#


def hospital(city_nodes, city_from, city_to):
    def neighboursMap():
        n = len(city_from)
        map = {}

        for city in range(1, city_nodes + 1):
            map[city] = []

        for i in range(n):
            map[city_from[i]].append(city_to[i])
            map[city_to[i]].append(city_from[i])

        return map

    def getLeaf(map):
        leafNodes = []
        for city in map:
            if len(map[city]) == 1:
                leafNodes.append(city)
        return leafNodes

    map = neighboursMap()
    print("State neighbors", map)

    childNodes = getLeaf(map)
    print("Child Nodes:", childNodes)

    def getLevels():
        que = queue.Queue()
        # omit first entry of the list
        level = [None] * (city_nodes + 1)
        marked = [False] * (city_nodes + 1)

        for leaf in childNodes:
            level[leaf] = 1
            que.put(leaf)

            while not que.empty():
                city = que.get()

                marked[city] = True
                neighbors = map[city]

                # print(city, neighbors)

                for neighbor in neighbors:
                    # getting right level for city
                    if not level[neighbor]:
                        level[neighbor] = level[city] + 1
                    elif level[neighbor] and level[neighbor] > level[city] + 1:
                        level[neighbor] = level[city] + 1

                    if not marked[neighbor]:
                        que.put(neighbor)
        return level[1:]

    print("Levels of city", getLevels())

    # for size in range(1,city_nodes):
    #     all_hospital_comb = list(itertools.combinations(range(1,city_nodes+1), size))
    #     #print(all_hospital_comb)
    #     for comb in all_hospital_comb:
    #         #print("checking", comb, checkReachable(comb))
    #         if checkReachable(comb):
    #             return len(comb)


if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    city_nodes, city_edges = map(int, input().rstrip().split())

    city_from = [0] * city_edges
    city_to = [0] * city_edges

    for i in range(city_edges):
        city_from[i], city_to[i] = map(int, input().rstrip().split())

    result = hospital(city_nodes, city_from, city_to)

    fptr.write(str(result) + '\n')

    fptr.close()
